minikube: 
---------
This is local a Kubernetes tool which will create a node on our local machine & it focus on making it easy to learn and develop for Kubernetes.

kubectl: 
--------
This is a program to control/manage the containers inside the node.

Node:
-----
Node is a physical or virtual machine where we will run the containers.

YAML:
-----
It is a human-readable data-serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted.

# Lines starts with # will be ignored as comments

1) Simplest data structure like key/value pair can be written like,

<Key>:<Space><Value>
Fruit: Apple

Here space is mandatory after colon.

2) Arrays can be written like,

Fruits:
-    Apple
-    Banana
-    Grape

3) Dict/Hash can be written like,

Fruits:
    Apple: Red
    Banana: Yellow
    Grape: Green


--------------------------
Development setups macOS:
--------------------------
1) Install homebrew
2) Install kubectl
- brew install kubectl
3) Install VM driver for virtualbox
- Download virtualbox from virtualbox.org
4) Install minikube
- brew cask install minikube
5) Start minikube
- minikube start

Note:
-----
In K8s, We do not create containers out of config files instead we create something called Objects, for example Pod, Service, StatufulSet, ReplicaController.
Each object servers different purpose like running a container, monitoring a container, setting up the network etc.


---------
Commands:
---------

1) Check the status of minikube
- minikube status
- kubectl cluster-info

2) Run a config file
- kubectl apply -f <path_to_config_file>

3) Get the status/details of specific object
- kubectl get <object-type>
eg: kubectl get pods OR kubectl get services

4) Get the IP address of minikube, we can accress Pod using this ip address
- minikube ip

5) Get nodes status
kubectl get nodes

6) Get pods status
kubectl get pods

7) Stop running minikube
- minikube stop

8) Get some extra columns like IP and Node name on which Pod is running 
- kubectl get pods -o wide

9) Get detailed description of pods
- kubectl describe pods

10) Run the pod and fetch the nginx image from DockerHub
- kubectl run nginx --image=nginx:alpine

11) Delete the pod/object
- kubectl delete <object-type> <object-name>
- kubectl delete pod nginx

12) To create a Pod using YAML file
Create file: sample-pod.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
    name: myapp-pod
    country: DHD-GJ-IN
spec:
  containers:
    - name: nginx-pod
      image: nginx:alpine
      
# Now save the file and run it using kubectl
- kubectl create -f ~/Documents/projects/Kubernaties-Examples/sample-pod.yaml
# Check the status of newly created pod after above command
- kubectl describe pod myapp-pod

13) To create a ReplicationController, Below is the code
Create a file: sample-replication.yaml
apiVersion: v1
kind: ReplicationController
metadata:
  name: myapp
spec:
  replicas: 3
  selector:
    app: myapp
  template:
    metadata:
      name: myapp
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp-replication
          image: nginx:alpine
          ports:
            - containerPort: 8080
            
# Now save the file and run it using kubectl
- kubectl create -f ~/Documents/projects/Kubernaties-Examples/sample-replication.yaml

# Get list of the replication controllers
- kubectl get replicationController

# Get list of the pods created by replication controllers
- kubectl get pods

14) 
